colnames(output_jags_2a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
output_jags_2a = output_jags_2a_raw[[1]]
colnames(output_jags_2a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s_mean),1/(inprod(pow(p,2),1/s_prec) + pow(sigma,2)))
}
p ~ ddirch(alpha)
sigma ~ dunif(0,100)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_2a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=10000)
plot(output_jags_2a_raw)
gelman.diag(output_jags_2a_raw,multivariate = FALSE)
output_jags_2a = output_jags_2a_raw[[1]]
colnames(output_jags_2a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
library(rjags)
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s),1/pow(sigma,2))
}
p ~ ddirch(alpha)
for(k in 1:K) { s[k] ~ dnorm(s_mean[k],s_prec[k]) }
sigma ~ dunif(0,100)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),K=nrow(sources),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_1a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=10000)
plot(output_jags_1a_raw)
gelman.diag(output_jags_1a_raw,multivariate = FALSE)
output_jags_1a = output_jags_1a_raw[[1]]
colnames(output_jags_1a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_1a,2,quantile,probs=c(0.1,0.5,0.9)),2))
t(round(apply(output_jags_1a,2,quantile,probs=c(0.1,0.5,0.9)),2))
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
library(rjags)
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s),1/pow(sigma,2))
}
p ~ ddirch(alpha)
for(k in 1:K) { s[k] ~ dnorm(s_mean[k],s_prec[k]) }
sigma ~ dunif(0,100)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),K=nrow(sources),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_1a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=100000)
gelman.diag(output_jags_1a_raw,multivariate = FALSE)
output_jags_1a = output_jags_1a_raw[[1]]
colnames(output_jags_1a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_1a,2,quantile,probs=c(0.1,0.5,0.9)),2))
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s_mean),1/(inprod(pow(p,2),1/s_prec) + pow(sigma,2)))
}
p ~ ddirch(alpha)
sigma ~ dunif(0,100)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_2a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=100000)
gelman.diag(output_jags_2a_raw,multivariate = FALSE)
output_jags_2a = output_jags_2a_raw[[1]]
colnames(output_jags_2a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s_mean),1/(inprod(p_sq,1/s_prec) + pow(sigma,2)))
}
for(k in 1:K) { p_sq[k] <- pow(p[k],2) }
p ~ ddirch(alpha)
sigma ~ dunif(0,100)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,K=nrow(sources),
N=nrow(geese1demo),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_2a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=100000)
gelman.diag(output_jags_2a_raw,multivariate = FALSE)
output_jags_2a = output_jags_2a_raw[[1]]
colnames(output_jags_2a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
library(rjags)
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s),1/pow(sigma,2))
}
p ~ ddirch(alpha)
for(k in 1:K) { s[k] ~ dnorm(s_mean[k],s_prec[k]) }
sigma ~ dunif(0,10)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),K=nrow(sources),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_1a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=100000)
#plot(output_jags_1a_raw)
gelman.diag(output_jags_1a_raw,multivariate = FALSE)
output_jags_1a = output_jags_1a_raw[[1]]
colnames(output_jags_1a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_1a,2,quantile,probs=c(0.1,0.5,0.9)),2))
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s_mean),1/(inprod(pow(p,2),1/s_prec) + pow(sigma,2)))
}
p ~ ddirch(alpha)
sigma ~ dunif(0,10)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_2a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=100000)
#plot(output_jags_2a_raw)
gelman.diag(output_jags_2a_raw,multivariate = FALSE)
output_jags_2a = output_jags_2a_raw[[1]]
colnames(output_jags_2a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
library(rjags)
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s),1/pow(sigma,2))
}
p ~ ddirch(alpha)
for(k in 1:K) { s[k] ~ dnorm(s_mean[k],s_prec[k]) }
sigma ~ dunif(0,10)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),K=nrow(sources),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_1a_raw = coda.samples(model=model,variable.names=c("p","sigma","s"),n.iter=100000)
plot(output_jags_1a_raw)
print(output_jags_1a_raw)
summary(output_jags_1a_raw)
gelman.diag(output_jags_1a_raw,multivariate = FALSE)
s_mean
data$s_mean
sqrt(1/data$s_prec)
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s_mean),1/(inprod(pow(p,2),1/s_prec) + pow(sigma,2)))
}
p ~ ddirch(alpha)
sigma ~ dunif(0,0.0001)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw),'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_2a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=100000)
#plot(output_jags_2a_raw)
gelman.diag(output_jags_2a_raw,multivariate = FALSE)
output_jags_2a = output_jags_2a_raw[[1]]
colnames(output_jags_2a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
modelstring ='
model {
for(i in 1:N) {
y[i] ~ dnorm(inprod(p,s_mean),1/(inprod(pow(p,2),1/s_prec) + pow(sigma,2)))
}
p ~ ddirch(alpha)
sigma ~ dunif(0,0.001)
}
'
data=list(y=geese1demo[,2],s_mean=sources[,3],s_prec=1/sources[,4]^2,
N=nrow(geese1demo),alpha=rep(1,nrow(sources)))
inits = function() {
p_raw = runif(4)
list('p'=p_raw/sum(p_raw))#,'sigma'=runif(1,0,10))
}
model=jags.model(textConnection(modelstring), data=data,n.chains=4,inits=inits)
output_jags_2a_raw = coda.samples(model=model,variable.names=c("p","sigma"),n.iter=100000)
gelman.diag(output_jags_2a_raw,multivariate = FALSE)
output_jags_2a = output_jags_2a_raw[[1]]
colnames(output_jags_2a) = c(as.character(sourcesdemo[,1]),'SD1')
t(round(apply(output_jags_2a,2,quantile,probs=c(0.1,0.5,0.9)),2))
source('~/.active-rstudio-document', echo=TRUE)
setwd("/Volumes/MacintoshHD2/GDrive/Conferences&Talks/SIAR_Glasgow/mod_9_building_SIMMs")
library(rjags)
setwd("/Volumes/MacintoshHD2/GDrive/Conferences&Talks/SIAR_Glasgow/mod_9_building_SIMMs")
source('Create_spline_data.R')
source('~/.active-rstudio-document', echo=TRUE)
modelstring ='
model {
for(i in 1:N) {
for(j in 1:J) {
y[i,j] ~ dnorm(inprod(p[i,]*q[,j],s[,j]+c[,j])/inprod(p[i,],q[,j]),1/pow(sigma[j],2))
}
}
for(k in 1:K) {
for(j in 1:J) {
s[k,j] ~ dnorm(s_mean[k,j],s_prec[k,j])
c[k,j] ~ dnorm(c_mean[k,j],c_prec[k,j])
}
}
for(i in 1:N) {
p[i,1:K] <- expf[i,]/sum(expf[i,])
for(k in 1:K) {
expf[i,k] <- exp(f[i,k])
f[i,k] ~ dnorm(mu_f[i,k],1/pow(sigma_f[k],2))
}
}
for(k in 1:K) {
mu_f[1:N,k] <- B%*%beta[,k]
sigma_f[k] ~ dgamma(2,1)
beta[1,k] ~ dnorm(0,0.001)
for(l in 2:L) { beta[l,k] ~ dnorm(beta[l-1,k],1/pow(sigma_beta[k],2)) }
sigma_beta[k] ~ dunif(0,10)
}
for(j in 1:J) { sigma[j] ~ dunif(0,10) }
}
'
library(siar)
con = read.csv('../mod_8_complex_SIMMs/GeeseConsumers2.csv')
data(geese1demo,sourcesdemo,correctionsdemo,concdepdemo)
sources = as.matrix(sourcesdemo[,2:5])
tefs = as.matrix(correctionsdemo[,2:5])
cd = as.matrix(concdepdemo[,c(2,4)])
B = bbase(con$julianday)
data=list(y=con[,2:3],s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(con),K=nrow(sources),
J=ncol(con[,2:3]),B=B,L=ncol(B))
model=jags.model(textConnection(modelstring), data=data, n.chains=3)
load('SIMM_spline_output.rda')
ls()
summary(output)
gelman.diag(output,multivari
)
gelman.diag(output,multivariate = FALSE)
summary(output)$statistics
rownames(summary(output)$statistics)
?grep
grep('beta',rownames(summary(output)$statistics))
beta_rows =  grep('beta',rownames(summary(output)$statistics))
beta_mean = summary(output)$statistics[beta_rows,2]
beta_mean
beta_rows = list(4)
beta_rows = list(length=4)
k=1
paste(',',k,']',sep='')
grep(paste(',',k,']',sep=''),rownames(summary(output)$statistics))
beta_rows = beta_mean = list(length=data$K)
for(k in 1:data$K) {
beta_rows[[k]] =  grep(paste(',',k,']',sep=''),rownames(summary(output)$statistics))
beta_mean[[k]] = summary(output)$statistics[beta_rows[[k]],2]
}
beta_mean
getwd()
source('bases.r')
bbase
range(con$julianday)
table(con$julianday)
debug(bbase)
bbase(con$julianday)
dx
knots
con$julianday%365
con$julianday%%365
(con$julianday-299.75)%%365
julianday_rescaled = (con$julianday-299.75)%%365
plot(con$julianday,julianday_rescaled)
library(siar)
con = read.csv('../mod_8_complex_SIMMs/GeeseConsumers2.csv')
data(geese1demo,sourcesdemo,correctionsdemo,concdepdemo)
sources = as.matrix(sourcesdemo[,2:5])
tefs = as.matrix(correctionsdemo[,2:5])
cd = as.matrix(concdepdemo[,c(2,4)])
julianday_rescaled = (con$julianday-299.75)%%365
B = bbase(con$julianday)
data=list(y=con[,2:3],s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(con),K=nrow(sources),
J=ncol(con[,2:3]),B=B,L=ncol(B))
model=jags.model(textConnection(modelstring), data=data, n.chains=3)
?debug
undebug(bbase)
library(siar)
con = read.csv('../mod_8_complex_SIMMs/GeeseConsumers2.csv')
data(geese1demo,sourcesdemo,correctionsdemo,concdepdemo)
sources = as.matrix(sourcesdemo[,2:5])
tefs = as.matrix(correctionsdemo[,2:5])
cd = as.matrix(concdepdemo[,c(2,4)])
julianday_rescaled = (con$julianday-299.75)%%365
B = bbase(julianday_rescaled)
data=list(y=con[,2:3],s_mean=sources[,c(1,3)],s_prec=1/sources[,c(2,4)]^2,
c_mean=tefs[,c(1,3)],c_prec=1/tefs[,c(2,4)]^2,
q=cd,N=nrow(con),K=nrow(sources),
J=ncol(con[,2:3]),B=B,L=ncol(B))
model=jags.model(textConnection(modelstring), data=data, n.chains=3)
output=coda.samples(model=model,variable.names=c('sigma_beta','beta','sigma_f'),n.iter=100000,thin=100)
setwd("/Volumes/MacintoshHD2/Dropbox/Rfiles/siar/Support/Fetahi_20150723")
setwd("/Volumes/MacintoshHD2/Dropbox/Rfiles/siar/Support/Fetahi_20150723")
library(siar)
sources<-read.table('ZiwaySourcesCombined2.txt',header=TRUE)
sources
data<-as.matrix(read.table('ZiwayTilapia1.txt',header=TRUE)
data<-as.matrix(read.table('ZiwayTilapia1.txt',header=TRUE))
data<-as.matrix(read.table('ZiwayTilapia1.txt',header=TRUE))
data
data<-as.matrix(read.table('ZiwayTilapia1.txt',header=TRUE)[,-1])
data
tef<-read.table('ZiwayTEFcombined.txt',header=TRUE)
tef
sources
tef2[,c(2,4,6)] = tef
tef2 = sources
tef2[,c(2,4,6)] = tef
tef2[,c(3,5,7)] = 0
tef2[,c(2,4,6)] = tef[,2:4]
tef2[,c(3,5,7)] = 0
tef2
head(data)
load(file='SIMM_spline_output.rda')
source('~/.active-rstudio-document', echo=TRUE)
rm(list=ls())
setwd("/Volumes/MacintoshHD2/GDrive/Conferences&Talks/SIAR_Glasgow/mod_9_building_SIMMs")
library(siar)
library(compositions)
install.packages('compositions')
source('/Volumes/MacintoshHD2/GDrive/Conferences&Talks/SIAR_Glasgow/mod_9_building_SIMMs/plot_spline_geese_output.R')
source('/Volumes/MacintoshHD2/GDrive/Conferences&Talks/SIAR_Glasgow/mod_9_building_SIMMs/plot_spline_geese_output.R')
source('/Volumes/MacintoshHD2/GDrive/Conferences&Talks/SIAR_Glasgow/mod_9_building_SIMMs/plot_spline_geese_output.R')
source('/Volumes/MacintoshHD2/GDrive/Conferences&Talks/SIAR_Glasgow/mod_9_building_SIMMs/plot_spline_geese_output.R')
ncol(B_new)
colnames(output)
colnames(output[[1]])
out = t(do.call(output,cbind))
out = t(do.call(cbind,output))
str(out)
out = do.call(cbind,output)
str(out)
srt(output)
str(output)
out = do.call(rbind,output)
str(out)
out = do.call(rbind,output)
beta_out = list(length=K)
k=1
grep(paste(',',k,']',sep=''),colnames(out))
for(k in 1:K) {
curr_cols = grep(paste(',',k,']',sep=''),colnames(out))
beta_out[[k]] = out[,curr_cols]
}
str(beta_out)
n_samples = nrow(out)
mu_f_pred = array(NA,dim=c(length(new_grid),K,n_samples))
for(s in 1:n_samples) {
for(k in 1:K) {
mu_f_pred[,k,s] = B_new%*%beta_out[[k]][s,]
}
}
p_pred = array(NA,dim=c(length(new_grid),K,n_samples))
for(s in 1:n_samples) {
p_pred[,,s] = clrInv(mu_f_pred[,,s])
}
p_upper = apply(p_pred,c(1,2),'quantile',probs=0.9)
p_median = apply(p_pred,c(1,2),'quantile',probs=0.5)
p_lower = apply(p_pred,c(1,2),'quantile',probs=0.1)
par(mar=c(3,3,2,1), mgp=c(2,.7,0), tck=-.01,las=1)
plot(new_grid,new_grid,type='n',xlab='Julian Day',ylim=c(0,1.1),las=1,xaxt='n',ylab='Dietary Proportion',pch=19,main='Dietary proportions by Julian day')
grid()
axis(1,at=seq(300,365,by=20),labels=seq(300,365,by=20))
new_grid
new_grid = seq(min(julianday_rescaled),max(julianday_rescaled),length=100)
B_new = bbase(new_grid)
dim(B_new)
out = do.call(rbind,output)
beta_out = list(length=K)
for(k in 1:K) {
curr_cols = grep(paste(',',k,']',sep=''),colnames(out))
beta_out[[k]] = out[,curr_cols]
}
n_samples = nrow(out)
mu_f_pred = array(NA,dim=c(length(new_grid),K,n_samples))
for(s in 1:n_samples) {
for(k in 1:K) {
mu_f_pred[,k,s] = B_new%*%beta_out[[k]][s,]
}
}
p_pred = array(NA,dim=c(length(new_grid),K,n_samples))
for(s in 1:n_samples) {
p_pred[,,s] = clrInv(mu_f_pred[,,s])
}
p_upper = apply(p_pred,c(1,2),'quantile',probs=0.9)
p_median = apply(p_pred,c(1,2),'quantile',probs=0.5)
p_lower = apply(p_pred,c(1,2),'quantile',probs=0.1)
par(mar=c(3,3,2,1), mgp=c(2,.7,0), tck=-.01,las=1)
plot(new_grid,new_grid,type='n',xlab='Julian Day',ylim=c(0,1.1),las=1,xaxt='n',ylab='Dietary Proportion',pch=19,main='Dietary proportions by Julian day')
new_grid
(0-300)%%365
(300-300)%%365
(365-300)%%365
(500-300)%%365
grid()
axis(1,at=seq(0,65,by=20),labels=seq(300,365,by=20))
axis(1,at=seq(65,200,by=20),labels=seq(365,500,by=20)%%365)
transp = 0.5
mycols = c(rgb(1,0,0,transp),rgb(0,0,1,transp),rgb(0,1,0,transp),rgb(1,1,0,transp))
for(k in 1:K) {
polygon(c(plot_grid,rev(plot_grid)),c(p_lower[,k],rev(p_upper[,k])),col=mycols[k],border=NA)
lines(plot_grid,p_median[,k],lwd=3,col=mycols[k])
}
polygon(c(new_grid,rev(new_grid)),c(p_lower[,k],rev(p_upper[,k])),col=mycols[k],border=NA)
par(mar=c(3,3,2,1), mgp=c(2,.7,0), tck=-.01,las=1)
plot(new_grid,new_grid,type='n',xlab='Julian Day',ylim=c(0,1.1),las=1,xaxt='n',ylab='Dietary Proportion',pch=19,main='Dietary proportions by Julian day')
# Add in a specialised axis
grid()
axis(1,at=seq(0,65,by=20),labels=seq(300,365,by=20))
axis(1,at=seq(65,200,by=20),labels=seq(365,500,by=20)%%365)
# Create some colours
transp = 0.5
mycols = c(rgb(1,0,0,transp),rgb(0,0,1,transp),rgb(0,1,0,transp),rgb(1,1,0,transp))
for(k in 1:K) {
polygon(c(new_grid,rev(new_grid)),c(p_lower[,k],rev(p_upper[,k])),col=mycols[k],border=NA)
lines(plot_grid,p_median[,k],lwd=3,col=mycols[k])
}
for(k in 1:K) {
polygon(c(new_grid,rev(new_grid)),c(p_lower[,k],rev(p_upper[,k])),col=mycols[k],border=NA)
lines(new_grid,p_median[,k],lwd=3,col=mycols[k])
}
mylinelocs = c(1+365,32+365,61+365,92+365,306,336)
myoffset = -0.5
mylineheight=0.9
lines(c(mylinelocs[1],mylinelocs[1]),c(0,1)) # 1/1
text(mylinelocs[1]+myoffset,mylineheight,labels='1st Jan',srt=90,pos=3,offset=0)
lines(c(mylinelocs[2],mylinelocs[2]),c(0,1)) # 1/2
text(mylinelocs[2]+myoffset,mylineheight,labels='1st Feb',srt=90,pos=3,offset=0)
lines(c(mylinelocs[3],mylinelocs[3]),c(0,1)) # 1/3
text(mylinelocs[3]+myoffset,mylineheight,labels='1st Mar',srt=90,pos=3,offset=0)
lines(c(mylinelocs[4],mylinelocs[4]),c(0,1)) # 1/4
text(mylinelocs[4]+myoffset,mylineheight,labels='1st Apr',srt=90,pos=3,offset=0)
lines(c(mylinelocs[5],mylinelocs[5]),c(0,1)) # 1/11
text(mylinelocs[5]+myoffset,mylineheight,labels='1st Nov',srt=90,pos=3,offset=0)
lines(c(mylinelocs[6],mylinelocs[6]),c(0,1)) # 1/12
text(mylinelocs[6]+myoffset,mylineheight,labels='1st Dec',srt=90,pos=3,offset=0)
legend('top',legend=sourcesdemo[,1],pch=19,col=mycols,horiz=T)
str(geese1demo)
data(sourcesdemo)
print(sourcesdemo)
str(sourcesdemo)
?siarmcmcdirichletv4
siarhistograms(out)
out = siarmcmcdirichletv4(geese1demo,sourcesdemo,correctionsdemo)
siarplotdata(out)
siarhistograms(out)
siarhistograms(out,ask=FALSE)
?siarhistograms
?siardensityplot
siardensityplot(out,ask=FALSE)
siarproportionbygroupplot(model1)
siarproportionbygroupplot(out)
siarhdrs(out)
siarhdrs
